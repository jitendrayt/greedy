/*

Problem :-

There is one meeting room in a firm. There are N meetings in the form of (S[i], F[i])
where S[i] is start time of meeting i and F[i] is finish time of meeting i.
What is the maximum number of meetings that can be accommodated in the meeting room?
also print the correct order of meetings.


Input:
The first line of input consists number of the test cases. The description of T test cases is as follows:
The first line consists of the size of the array, second line has the array containing the starting time of
all the meetings each separated by a space, i.e., S [ i ]. And the third line has the array containing the 
finishing time of all the meetings each separated by a space, i.e., F [ i ].

Output:
In each separate line print the order in which the meetings take place separated by a space.


Solution:-

This is a classic example of Activity selection problem which can be solved by using greedy algorithm.

the algorithm is as follws :-

Step 1: Sort the activities according to their finishing time.

step 2: Take the activity which is finishing at the earliest ( Greedy Choice :  which Leaves out most amount 
of time for other activities)

Step 3: Take the activity that is finishing earliest but also must start only after the last activity's
finishing time since we can only have one activity at once.

Step 4: repeat step 3 and 4 untill all the activities are exhausted.


*/

int main() {
	//code
	
	int t;
	
	cin>>t;
	for(t;t>0;t--)
	{
	    int n;
	    cin>>n;
	    vector<vector<int>> act;
	    vector<int> s;
	    vector<int> f;
	    
	    
	    for (int i=0;i<n;i++)
	    {
	        int start;
	        cin>>start;
	        s.push_back(start);
	        
	    }
	    
	    for(int i=0;i<n;i++)
	    {
	        int finish;
	        cin>>finish;
	        f.push_back(finish);
	    }
	    
	    for(int i=0; i<n;i++)
	    {
// act[{activity_finishtime , activity_starttime, activity number}]
	        vector<int> curr={f[i],s[i],i+1};
	        act.push_back(curr);
	    }
	    
	    
	    
	    sort(act.begin(),act.end());
	    //it will sort according to the activity finish time.
	    //we have activity_start time at 1 index because if the finish time is same then 
	    //the correct order shall be the activity that comes first(sort according to start time).
	    vector<int> res;
	    int last_f=INT_MIN;
	    
	    for(int i=0; i<act.size();i++)
	    {
	        
	        if(act[i][1]>last_f)
	        {
	            cout<<act[i][2]<<" ";
	            last_f=act[i][0];   
	        }
	        
	    }
	    cout<<endl;
	}
	return 0;
}
