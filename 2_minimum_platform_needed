/*
Minimum Number of Platforms Required for a Railway/Bus Station.



Given arrival and departure times of all trains that reach a railway station, the task is to find the 
minimum number of platforms required for the railway station so that no train waits.
We are given two arrays which represent arrival and departure times of trains that stop


Input: arr[] = {9:00, 9:40, 9:50, 11:00, 15:00, 18:00}
dep[] = {9:10, 12:00, 11:20, 11:30, 19:00, 20:00}
Output: 3
Explantion: There are at-most three trains at a time (time between 11:00 to 11:20)

Input: arr[] = {9:00, 9:40}
dep[] = {9:10, 12:00}
Output: 1

*/

/*
Approach : The main idea is to consider both the arrival and departure arrays in sorted order, 
by doing this we will be able to keep a track of the trains that have arrived
but not yet departed , we'll know if a train has departed if the next train arrived has an 
arrival time more than the departed time of the last train.
*/



#include <algorithm> 
#include <iostream> 
  
using namespace std; 
  

int minPlatform(int arr[], int dep[], int n) 
{ 
  // we'll sort both the arrays.
    sort(arr, arr + n); 
    sort(dep, dep + n); 
  
    // we'll require at least 1 platform on a station for any train to come to. 
    int plat_needed = 1, result = 1; 
    int i = 1, j = 0; 
  
  // ii and j will be used to iterate through arrival and departure respectively.
    while (i < n && j < n) { 
      
      //if a train comes before the last train has departed we'll increment the no of platform required and 
      check for the net train .
        if (arr[i] <= dep[j]) { 
            plat_needed++; 
            i++; 
        } 
  
        //else if a train has arrived after the last train has departed then we'll decrement the no of 
        patform required we'll do it as long as the previous trains have derparture time 
        // less than the arrival time of the current train.
        else if (arr[i] > dep[j]) { 
            plat_needed--; 
            j++; 
        } 
  
        // we'll keep on updating the result if need be.
        if (plat_needed > result) 
            result = plat_needed; 
    } 
  
    return result; 
} 
  

int main() 
{ 
    int arr[] = { 900, 940, 950, 1100, 1500, 1800 }; 
    int dep[] = { 910, 1200, 1120, 1130, 1900, 2000 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    cout << "Minimum Number of Platforms Required = "
         << findPlatform(arr, dep, n); 
    return 0; 
} 
